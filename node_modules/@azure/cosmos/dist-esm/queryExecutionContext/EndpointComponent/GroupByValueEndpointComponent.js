import { __awaiter } from "tslib";
import { hashObject } from "../../utils/hashObject";
import { createAggregator } from "../Aggregators";
import { getInitialHeader } from "../headerUtils";
import { emptyGroup, extractAggergateResult } from "./emptyGroup";
/** @hidden */
export class GroupByValueEndpointComponent {
    constructor(executionContext, queryInfo) {
        this.executionContext = executionContext;
        this.queryInfo = queryInfo;
        this.aggergators = new Map();
        this.aggreateResultArray = [];
        this.completed = false;
        // VALUE queries will only every have a single grouping
        this.aggregateType = this.queryInfo.aggregates[0];
    }
    nextItem() {
        return __awaiter(this, void 0, void 0, function* () {
            // Start returning results if we have processed a full results set
            if (this.aggreateResultArray.length > 0) {
                return { result: this.aggreateResultArray.pop(), headers: getInitialHeader() };
            }
            if (this.completed) {
                return { result: undefined, headers: getInitialHeader() };
            }
            // Grab the next result
            const { result, headers } = (yield this.executionContext.nextItem());
            // If it exists, process it via aggreatators
            if (result) {
                let grouping = emptyGroup;
                let payload = result;
                if (result.groupByItems) {
                    // If the query contains a GROUP BY clause, it will have a payload property and groupByItems
                    payload = result.payload;
                    grouping = yield hashObject(result.groupByItems);
                }
                const aggergator = this.aggergators.get(grouping);
                if (!aggergator) {
                    // This is the first time we have seen a grouping so create a new aggregator
                    this.aggergators.set(grouping, createAggregator(this.aggregateType));
                }
                if (this.aggregateType) {
                    const aggregateResult = extractAggergateResult(payload[0]);
                    this.aggergators.get(grouping).aggregate(aggregateResult);
                }
                else {
                    // Queries with no aggregates pass the payload directly to the aggregator
                    // Example: SELECT VALUE c.team FROM c GROUP BY c.team
                    this.aggergators.get(grouping).aggregate(payload);
                }
            }
            // It no results are left in the underling execution context, convert our aggregate results to an array
            if (!this.executionContext.hasMoreResults()) {
                for (const aggergator of this.aggergators.values()) {
                    this.aggreateResultArray.push(aggergator.getResult());
                }
                this.completed = true;
                return { result: this.aggreateResultArray.pop(), headers };
            }
            return { result: undefined, headers };
        });
    }
    hasMoreResults() {
        return this.executionContext.hasMoreResults() || this.aggreateResultArray.length > 0;
    }
}
//# sourceMappingURL=GroupByValueEndpointComponent.js.map